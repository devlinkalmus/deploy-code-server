/**
 * Scaffold Generator Component
 * Natural language input for generating files, modules, and logic blocks
 * Phase 14 implementation for JRVI
 */

import React, { useState, useRef } from 'react';
import { logger, LogLevel } from '../../utils/logging';

export interface ScaffoldRequest {
  id: string;
  prompt: string;
  fileType: 'typescript' | 'javascript' | 'json' | 'markdown' | 'yaml' | 'config';
  targetPath: string;
  brand: string;
  persona: string;
  rationale: string;
  status: 'pending' | 'generated' | 'approved' | 'rejected';
  timestamp: Date;
  traceId: string;
}

export interface GeneratedArtifact {
  id: string;
  fileName: string;
  content: string;
  fileType: string;
  preview: string;
  metadata: {
    traceId: string;
    persona: string;
    brand: string;
    rationale: string;
    generatedAt: Date;
  };
}

interface ScaffoldGeneratorProps {
  currentBrand: string;
  currentPersona: string;
  onArtifactGenerated: (artifact: GeneratedArtifact) => void;
  onAuditEvent: (event: any) => void;
}

export default function ScaffoldGenerator({
  currentBrand,
  currentPersona,
  onArtifactGenerated,
  onAuditEvent
}: ScaffoldGeneratorProps) {
  const [prompt, setPrompt] = useState('');
  const [fileType, setFileType] = useState<ScaffoldRequest['fileType']>('typescript');
  const [targetPath, setTargetPath] = useState('');
  const [rationale, setRationale] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [requests, setRequests] = useState<ScaffoldRequest[]>([]);
  const [generatedArtifacts, setGeneratedArtifacts] = useState<GeneratedArtifact[]>([]);
  const [showAdvanced, setShowAdvanced] = useState(false);

  const generateId = () => Date.now().toString(36) + Math.random().toString(36).substr(2, 9);
  const generateTraceId = () => `trace_${generateId()}`;

  const fileTypeTemplates = {
    typescript: {
      extension: '.ts',
      template: (name: string, description: string) => `/**
 * ${description}
 * Generated by JRVI Scaffold Generator
 * Brand: ${currentBrand} | Persona: ${currentPersona}
 */

export interface ${name}Interface {
  // Define your interface here
}

export class ${name} implements ${name}Interface {
  constructor() {
    // Initialize your class
  }

  // Add your methods here
}

export default ${name};`,
      icon: '⚡'
    },
    javascript: {
      extension: '.js',
      template: (name: string, description: string) => `/**
 * ${description}
 * Generated by JRVI Scaffold Generator
 * Brand: ${currentBrand} | Persona: ${currentPersona}
 */

class ${name} {
  constructor() {
    // Initialize your class
  }

  // Add your methods here
}

module.exports = ${name};`,
      icon: '📜'
    },
    json: {
      extension: '.json',
      template: (name: string, description: string) => JSON.stringify({
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": name,
        "description": description,
        "type": "object",
        "properties": {},
        "required": [],
        "_metadata": {
          "generatedBy": "JRVI Scaffold Generator",
          "brand": currentBrand,
          "persona": currentPersona,
          "timestamp": new Date().toISOString()
        }
      }, null, 2),
      icon: '📋'
    },
    markdown: {
      extension: '.md',
      template: (name: string, description: string) => `# ${name}

${description}

## Overview

Generated by JRVI Scaffold Generator  
**Brand:** ${currentBrand} | **Persona:** ${currentPersona}  
**Created:** ${new Date().toISOString()}

## Features

- Feature 1
- Feature 2
- Feature 3

## Usage

\`\`\`typescript
// Add usage examples here
\`\`\`

## Configuration

Add configuration details here.

## Contributing

Please follow JRVI Core Principles and Constitution guidelines.
`,
      icon: '📝'
    },
    yaml: {
      extension: '.yaml',
      template: (name: string, description: string) => `# ${name}
# ${description}
# Generated by JRVI Scaffold Generator
# Brand: ${currentBrand} | Persona: ${currentPersona}

metadata:
  name: "${name}"
  description: "${description}"
  brand: "${currentBrand}"
  persona: "${currentPersona}"
  generated: "${new Date().toISOString()}"

spec:
  # Add your YAML configuration here
  version: "1.0"
  type: "configuration"
`,
      icon: '⚙️'
    },
    config: {
      extension: '.config.js',
      template: (name: string, description: string) => `/**
 * ${name} Configuration
 * ${description}
 * Generated by JRVI Scaffold Generator
 * Brand: ${currentBrand} | Persona: ${currentPersona}
 */

module.exports = {
  // Basic configuration
  name: "${name}",
  description: "${description}",
  version: "1.0.0",
  
  // Brand context
  brand: "${currentBrand}",
  persona: "${currentPersona}",
  
  // Generated metadata
  generated: {
    timestamp: "${new Date().toISOString()}",
    generator: "JRVI Scaffold Generator"
  },
  
  // Add your configuration properties here
  settings: {
    // Configuration settings
  }
};`,
      icon: '🔧'
    }
  };

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      alert('Please enter a prompt for generation');
      return;
    }

    if (!rationale.trim()) {
      alert('Please provide a rationale for this generation');
      return;
    }

    setIsGenerating(true);
    const traceId = generateTraceId();
    const requestId = generateId();

    // Create scaffold request
    const request: ScaffoldRequest = {
      id: requestId,
      prompt: prompt.trim(),
      fileType,
      targetPath: targetPath || `generated/${fileType}-${requestId}`,
      brand: currentBrand,
      persona: currentPersona,
      rationale: rationale.trim(),
      status: 'pending',
      timestamp: new Date(),
      traceId
    };

    setRequests(prev => [request, ...prev]);

    // Log audit event
    const auditEvent = {
      action: 'scaffold_generation_requested',
      traceId,
      brand: currentBrand,
      persona: currentPersona,
      timestamp: new Date(),
      details: {
        prompt: prompt.trim(),
        fileType,
        targetPath: request.targetPath,
        rationale: rationale.trim(),
        requestId
      }
    };

    logger.audit('Scaffold generation requested', 'scaffold-generator', auditEvent.details, {
      tags: ['scaffold', 'generation', 'request'],
      brandAffinity: [currentBrand],
      requestId: traceId
    });

    onAuditEvent(auditEvent);

    // Simulate generation process
    setTimeout(() => {
      try {
        // Parse filename from prompt or use default
        const fileName = extractFileNameFromPrompt(prompt) || `Generated${fileType.charAt(0).toUpperCase() + fileType.slice(1)}`;
        const template = fileTypeTemplates[fileType];
        const description = extractDescriptionFromPrompt(prompt) || `Generated ${fileType} module`;
        
        const generatedContent = template.template(fileName, description);
        
        const artifact: GeneratedArtifact = {
          id: generateId(),
          fileName: `${fileName}${template.extension}`,
          content: generatedContent,
          fileType,
          preview: generatedContent.substring(0, 200) + (generatedContent.length > 200 ? '...' : ''),
          metadata: {
            traceId,
            persona: currentPersona,
            brand: currentBrand,
            rationale: rationale.trim(),
            generatedAt: new Date()
          }
        };

        setGeneratedArtifacts(prev => [artifact, ...prev]);
        
        // Update request status
        setRequests(prev => 
          prev.map(req => 
            req.id === requestId 
              ? { ...req, status: 'generated' as const }
              : req
          )
        );

        onArtifactGenerated(artifact);

        // Log completion
        logger.audit('Scaffold generation completed', 'scaffold-generator', {
          traceId,
          artifactId: artifact.id,
          fileName: artifact.fileName,
          fileType,
          brand: currentBrand,
          persona: currentPersona
        }, {
          tags: ['scaffold', 'generation', 'completed'],
          brandAffinity: [currentBrand],
          requestId: traceId
        });

        onAuditEvent({
          action: 'scaffold_generation_completed',
          traceId,
          brand: currentBrand,
          persona: currentPersona,
          timestamp: new Date(),
          details: {
            artifactId: artifact.id,
            fileName: artifact.fileName,
            fileType
          }
        });

      } catch (error) {
        logger.error('Scaffold generation failed', 'scaffold-generator', {
          error: error instanceof Error ? error.message : String(error),
          traceId,
          brand: currentBrand,
          persona: currentPersona
        });

        setRequests(prev => 
          prev.map(req => 
            req.id === requestId 
              ? { ...req, status: 'rejected' as const }
              : req
          )
        );
      }

      setIsGenerating(false);
    }, 2000);
  };

  const extractFileNameFromPrompt = (prompt: string): string | null => {
    const patterns = [
      /create\s+(?:a\s+)?(?:file\s+)?(?:called\s+|named\s+)?([A-Za-z][A-Za-z0-9_]*)/i,
      /generate\s+(?:a\s+)?(?:file\s+)?(?:called\s+|named\s+)?([A-Za-z][A-Za-z0-9_]*)/i,
      /(?:file|class|module|component)\s+(?:called\s+|named\s+)?([A-Za-z][A-Za-z0-9_]*)/i
    ];

    for (const pattern of patterns) {
      const match = prompt.match(pattern);
      if (match && match[1]) {
        return match[1];
      }
    }

    return null;
  };

  const extractDescriptionFromPrompt = (prompt: string): string => {
    // Simple extraction - could be enhanced with NLP
    if (prompt.includes('for') || prompt.includes('that')) {
      return prompt;
    }
    return `Generated based on: ${prompt}`;
  };

  const handleClear = () => {
    setPrompt('');
    setTargetPath('');
    setRationale('');
  };

  const getStatusColor = (status: ScaffoldRequest['status']) => {
    switch (status) {
      case 'pending': return 'text-yellow-600 bg-yellow-100';
      case 'generated': return 'text-green-600 bg-green-100';
      case 'approved': return 'text-blue-600 bg-blue-100';
      case 'rejected': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold text-gray-900">
          🏗️ Scaffold Generator
        </h3>
        <div className="flex items-center space-x-2 text-sm text-gray-500">
          <span>Brand: <strong>{currentBrand}</strong></span>
          <span>•</span>
          <span>Persona: <strong>{currentPersona}</strong></span>
        </div>
      </div>

      {/* Generation Form */}
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Natural Language Prompt
          </label>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Describe what you want to generate... e.g., 'Create a TypeScript class called UserManager for handling user authentication'"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            rows={3}
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              File Type
            </label>
            <select
              value={fileType}
              onChange={(e) => setFileType(e.target.value as ScaffoldRequest['fileType'])}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {Object.entries(fileTypeTemplates).map(([type, config]) => (
                <option key={type} value={type}>
                  {config.icon} {type.charAt(0).toUpperCase() + type.slice(1)}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Target Path (optional)
            </label>
            <input
              type="text"
              value={targetPath}
              onChange={(e) => setTargetPath(e.target.value)}
              placeholder="e.g., src/components/UserManager"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Rationale <span className="text-red-500">*</span>
          </label>
          <textarea
            value={rationale}
            onChange={(e) => setRationale(e.target.value)}
            placeholder="Explain why this generation is needed and how it aligns with JRVI principles..."
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            rows={2}
            required
          />
        </div>

        <div className="flex items-center space-x-3">
          <button
            onClick={handleGenerate}
            disabled={isGenerating || !prompt.trim() || !rationale.trim()}
            className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
          >
            {isGenerating ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                <span>Generating...</span>
              </>
            ) : (
              <>
                <span>🚀</span>
                <span>Generate</span>
              </>
            )}
          </button>

          <button
            onClick={handleClear}
            className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
          >
            Clear
          </button>

          <button
            onClick={() => setShowAdvanced(!showAdvanced)}
            className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
          >
            {showAdvanced ? 'Hide' : 'Show'} Advanced
          </button>
        </div>
      </div>

      {/* Recent Requests */}
      {requests.length > 0 && (
        <div className="mt-6 border-t pt-4">
          <h4 className="text-sm font-medium text-gray-900 mb-3">Recent Requests</h4>
          <div className="space-y-2 max-h-32 overflow-y-auto">
            {requests.slice(0, 5).map((request) => (
              <div key={request.id} className="flex items-center justify-between text-xs bg-gray-50 rounded p-2">
                <div className="flex-1 truncate">
                  <span className="font-medium">{request.prompt.substring(0, 50)}...</span>
                </div>
                <div className="flex items-center space-x-2 ml-2">
                  <span className="text-gray-500">{fileTypeTemplates[request.fileType].icon}</span>
                  <span className={`px-2 py-1 rounded text-xs ${getStatusColor(request.status)}`}>
                    {request.status}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}